<?php

/**
 * Test PECE access.
 * Need administrator has all permissions or create user without role
 * Need simpletes module installed
 *
 */
class PeceMatrixAccess  extends DrupalWebTestCase {
  // - Create getInfo method
  // - Create setUp method
  // - Create test method to list all nodes in Drupal

  // Create getInfo method
  public static function getInfo() {
    return array(
      'name' => 'Pece Matrix Access',
      'description' => 'Create Pece Matrix Access',
      'group' => 'PECE',
    );
  }

  protected function prepareDatabasePrefix()
  {
    //parent::prepareDatabasePrefix(); // TODO: Change the autogenerated stub
  }

  protected function tearDown () {

  }

  protected function prepareEnvironment() {
    global $user, $language, $language_url, $conf;

    // Store necessary current values before switching to prefixed database.
    $this->originalLanguage = $language;
    $this->originalLanguageUrl = $language_url;
    $this->originalLanguageDefault = variable_get('language_default');
    $this->originalFileDirectory = variable_get('file_public_path', conf_path() . '/files');
    $this->verboseDirectoryUrl = file_create_url($this->originalFileDirectory . '/simpletest/verbose');
    $this->originalProfile = drupal_get_profile();
    $this->originalCleanUrl = variable_get('clean_url', 0);
    $this->originalUser = $user;

    // Set to English to prevent exceptions from utf8_truncate() from t()
    // during install if the current language is not 'en'.
    // The following array/object conversion is copied from language_default().
    $language_url = $language = (object) array('language' => 'en', 'name' => 'English', 'native' => 'English', 'direction' => 0, 'enabled' => 1, 'plurals' => 0, 'formula' => '', 'domain' => '', 'prefix' => '', 'weight' => 0, 'javascript' => '');

    // Save and clean the shutdown callbacks array because it is static cached
    // and will be changed by the test run. Otherwise it will contain callbacks
    // from both environments and the testing environment will try to call the
    // handlers defined by the original one.
    $callbacks = &drupal_register_shutdown_function();
    $this->originalShutdownCallbacks = $callbacks;
    $callbacks = array();

    // Create test directory ahead of installation so fatal errors and debug
    // information can be logged during installation process.
    // Use temporary files directory with the same prefix as the database.
    $this->public_files_directory = $this->originalFileDirectory;
    $this->private_files_directory = $this->public_files_directory . '/private';
    $this->temp_files_directory = $this->private_files_directory . '/temp';

    // Create the directories
    file_prepare_directory($this->public_files_directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
    file_prepare_directory($this->private_files_directory, FILE_CREATE_DIRECTORY);
    file_prepare_directory($this->temp_files_directory, FILE_CREATE_DIRECTORY);
    $this->generatedTestFiles = FALSE;

    // Log fatal errors.
    ini_set('log_errors', 1);
    ini_set('error_log', $this->public_files_directory . '/error.log');

    // Set the test information for use in other parts of Drupal.
    $test_info = &$GLOBALS['drupal_test_info'];
    $test_info['test_run_id'] = $this->databasePrefix;
    $test_info['in_child_site'] = FALSE;

    // Indicate the environment was set up correctly.
    $this->setupEnvironment = TRUE;
  }

  // Create setUp method
  function setUp() {
    //exec('drush sql-dump > copy-db.sql');
    $this->profile = 'PECE';
    $this->databasePrefix = '';
    $this->prepareEnvironment();
    $this->setupDatabasePrefix = TRUE;
    $this->setup = TRUE;
    $this->public_files_directory = $this->originalFileDirectory . '/simpletest/' . substr($this->databasePrefix, 10);
    $this->private_files_directory = $this->public_files_directory . '/private';
    $this->temp_files_directory = $this->private_files_directory . '/temp';
    
    // Create a new user object.
    $this->admin_user = $this->drupalCreateUserWithRole('migrate_','administrator');
  }

  /**
   * Show count nodes.
   */
  public function testListAllArtifactTest() {
    $this->drupalLogin($this->admin_user);
    $this->drupalGet('/admin/content');
    $this->assertResponse(200);
    $nodes = node_load_multiple(array(), array('type' => 'pece_artifact_text'));
    // create json file with all nodes and save in this folder
    $json = json_encode($nodes);
    $file = 'pece_artifact_text.json';
    // save json file in the module folder
    $file_path = drupal_realpath(drupal_get_path('module', 'pece_access')) . '/' . $file;
    file_put_contents($file_path, $json);
    $this->assertTrue(file_exists($file_path), 'File exists');

    //user_delete($this->admin_user->uid);

  }
  /**
   *  Create user with role.
   * @param $role
   */
  protected function drupalCreateUserWithRole($prefixname = '', $role) {
    $user = $this->drupalCreateUser();
    $user->name = $prefixname . $user->name;
    $role = user_role_load_by_name($role);
    $user->roles = array($role->rid => $role->name);
    user_save($user);
    return $user;
  }
}
